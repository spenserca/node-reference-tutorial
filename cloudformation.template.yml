AWSTemplateFormatVersion: "2010-09-09"
Description: Product Service
Parameters:
  Image:
    Type: String
    Description: Docker image to run
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet Ids to run in
  BaseDomain:
    Type: String
    Description: Domain name to place this application under as a subdomain
  Subdomain:
    Type: String
    Description: Subdomain to deploy this app to
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties: {}
  # This is the role that our task will excute as. You can think of this as the ECS equivilent of an instnace profile.
  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow ECS the ability to assume this role.
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        # We need to be able to pull our docker image. If your docker repo is in the same account this policy will do it.
        # If you are deploying accross accounts you could remove this and instead ensure that your repo is readable by this role
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  TaskPolicy:
    # This is an additional policy we are going to attach to our role.
    # We can add additoinal one-off grants here to allow our container to only access the AWS resources it needs.
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${AWS::StackName}-TaskPolicy"
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow the task to forward to Cloudwatch logs. (anything we send to stdout or stderr will go there)
          - Effect: "Allow"
            Action: 
              - logs:*
            Resource: !GetAtt LogGroup.Arn
  # Create a place for logs to go.
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
  # This defines the resources we need for our Task to execute
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: 
      # We need a depends on here because without it the task may attempt to start before the policy is attached to the role.
      - TaskPolicy
    Properties: 
      Cpu: 256 #This is 25% of a "vCPU", the smallest amount we can allocate
      Memory: 512 #This is 512MB, the smallest amount we can allocate
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      # These next two properties are the only Fargate specific configuration in the TaskDefinition. 
      # It forces an 'awsvpc' network mode
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: ProductService
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          Image: !Ref Image
          LogConfiguration:
            # This tells ECS to send log output to Cloudwatch. The prefix is required by Fargate so don't remove it.
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ProductService
  Service: 
    Type: "AWS::ECS::Service"
    Properties: 
      Cluster: !Ref ECSCluster
      # This is new with fargate (obviously)
      LaunchType: FARGATE
      # The number of instances we would like to run
      DesiredCount: 1 
      # The task to execute
      TaskDefinition: !Ref TaskDefinition
  #    We haven't setup a load balancer yet so this part is commented out. 
  #    The Service references the loadbalancer rather than the other way around
      LoadBalancers: 
        - ContainerName: ProductService
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
          - !Ref AppSG
      # This is optional (These are the default values)
      DeploymentConfiguration:
        MinimumHealthyPercent: 100 #Never allow less than this percentage of servers to be running during a deploy
        MaximumPercent: 200 # Allow double the number of servers to be running during a deployment
  LoadBalancerSG: #This security group allows us to whitelist traffic from the internet to our load balancer
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Load balancer security group"
      VpcId: !Ref VpcId      
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
  AppSG: #This security group holds the application
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Application security group"
      VpcId: !Ref VpcId 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          SourceSecurityGroupId: !Ref LoadBalancerSG
          FromPort: 1
          ToPort: 65000
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSG
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref Certificate
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
      - LoadBalancer
    Properties:
      TargetType: ip #the default is "instance" but we must use ip to forward to fargate
      VpcId: !Ref VpcId
      Protocol: HTTP # do not change to HTTPS
      Port: 3000
      HealthCheckPath: /hello
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key:  deregistration_delay.timeout_seconds
          Value:  30
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomain}."
      Name: !Sub "${Subdomain}.${BaseDomain}"
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt "LoadBalancer.CanonicalHostedZoneID"
        DNSName: !GetAtt "LoadBalancer.DNSName"
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${Subdomain}.${BaseDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${Subdomain}.${BaseDomain}"
          ValidationDomain: !Ref BaseDomain
Outputs:
  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
