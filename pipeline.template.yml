AWSTemplateFormatVersion: "2010-09-09"
Description: Pipeline for Product Service
Parameters:
  RepoToken:
    Type: String
    NoEcho: true
    Description: OAuth Token for the github repository
  PipelineAdminArn:
    Type: String
    Description: |
      ARN of a user or role that can administrate this pipeline.
      This can be obtained by running 'aws sts get-caller-identity --query='Arn' --output=text'
Resources:
  ArtifactStorage:
    Type: "AWS::S3::Bucket"
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "codebuild.amazonaws.com"
          - Effect: "Allow" 
            Action: "sts:AssumeRole"
            Principal:
              Service: "codepipeline.amazonaws.com"
          - Effect: "Allow" 
            Action: "sts:AssumeRole"
            Principal:
              Service: "cloudformation.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess"
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  DockerRepo:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Action:
              - "ecr:*"
            Principal:
              AWS:
                - !GetAtt PipelineRole.Arn
  # This resource sets up the build. In general, all it does is run arbitrary shell commands inside of a docker 
  # container
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      #This is the role that the build will execute as. If your build needs to pull artifacts from S3 or reach out of its container for any reason make sure this role has the permissions to do so.
      ServiceRole: !GetAtt PipelineRole.Arn 
      Source:
        #Where our sourcecode will come from (This special keyword says that CodePipeline will provide it)
        Type: CODEPIPELINE
      Environment:
        #This specifies what docker image and how much resources to give it to run the build.
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:1.12.1
        EnvironmentVariables:
          #We can put anything we want here and these will be set as environment variables when the build runs. 
          #We're leveraging this to point to the Docker image repository we created earlier.
          - Name: DOCKER_IMAGE_URL
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepo}"
      Artifacts:
        #Send any output back to code pipeline
        Type: CODEPIPELINE
  Pipeline:
    #This is the "Pipeline" or order flow of execution.
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - BuildProject
    Properties:
      ArtifactStore:
        Type: "S3"
        Location: !Ref ArtifactStorage
      RoleArn: !GetAtt PipelineRole.Arn
      RestartExecutionOnUpdate: true
      Stages: 
          #The first step triggers with changes in Github
        - Name: Source
          Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Provider: GitHub
              Owner: ThirdParty
              Version: 1
            OutputArtifacts:
              - Name: sourceCode
            Configuration:
              Owner: "spenserca" #Update this with your github username
              Repo: "node-reference-tutorial" #The repository to checkout
              Branch: master
              OAuthToken: !Ref RepoToken
          #Step two is to build the project using our configured CodeBuild project above.
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: 1
            InputArtifacts:
              - Name: sourceCode
            Configuration:
              ProjectName: !Ref BuildProject
            OutputArtifacts:
              - Name: buildResults
        - Name: Deploy_DEV
          Actions:
          - Name: Deploy
            RoleArn: !GetAtt PipelineRole.Arn
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: buildResults
            Configuration:
              #this is the name of the stack
              StackName: ProductService-DEV 
              #becuase this is dev, if the deploy fails on the first create, just destroy it rather than getting stuck in CREATE_FAILED state
              ActionMode: REPLACE_ON_FAILURE 
              #this special syntax represents the file we put in our "artifacts" section of the buildspec.yml
              TemplatePath: buildResults::cloudformation.template.yml
              TemplateConfiguration: buildResults::dev.params.json
              RoleArn: !GetAtt PipelineRole.Arn
              Capabilities: CAPABILITY_IAM
          - Name: IntegrationTest
            RunOrder: 2
            ActionTypeId:
              Category: Test
              Owner: AWS
              Provider: CodeBuild
              Version: 1
            InputArtifacts:
              - Name: buildResults
            Configuration:
              ProjectName: !Ref IntegrationTest
          #This is the same as the stage above except the StackName, ActionMode and TemplateConfiguration are different
        - Name: Deploy_PROD
          Actions:
          - Name: Deploy
            RoleArn: !GetAtt PipelineRole.Arn
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: buildResults
            Configuration:
              StackName: ProductService-PROD 
              #Create or update the stack, but don't delete it if it fails
              ActionMode: CREATE_UPDATE 
              TemplatePath: buildResults::cloudformation.template.yml
              TemplateConfiguration: buildResults::prod.params.json
              RoleArn: !GetAtt PipelineRole.Arn
              Capabilities: CAPABILITY_IAM
  IntegrationTest:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - PipelineRole
    Properties:
      ServiceRole: !GetAtt PipelineRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: integration.buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: BASE_URL
            Value: "http://Produ-LoadB-QPGE6YFMFZOT-225149505.us-east-2.elb.amazonaws.com/"
          - Name: CLIENT_ID
            Value: "48svd1u83hs3371s44em35fli"
          - Name: ENCRYPTED_CLIENT_SECRET
            Value: "AQICAHhBYFqAIGLrKIiTIB6ji/SKxxg1y9iS+2faCPTfvEs26wHUH8n5kfTZsWsa4A9Np27hAAAAlTCBkgYJKoZIhvcNAQcGoIGEMIGBAgEAMHwGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM7IVD+f7mIrsBApPmAgEQgE+d68keWi7bQOyr4SmUERGplGAtzzzSjP6WhNSEAZ9slF+CO/BGPY7lKItOh7VbCfXClwzPErtocv2J9Z0RK/JRDuGDXA0qirHsqsbbi6h2"
          - Name: TOKEN_ENDPOINT
            Value: "https://Produ-LoadB-QPGE6YFMFZOT-225149505.us-east-2.elb.amazonaws.com.auth.us-east-2.amazoncognito.com/oauth2/token"
      Artifacts:
        Type: CODEPIPELINE
  PipelineKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Statement: 
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal: 
              AWS: !Ref PipelineAdminArn
            Action: 
              - "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal: 
              AWS: !GetAtt PipelineRole.Arn
            Action: 
              - "kms:Decrypt"
            Resource: "*"
          - Sid: "Allow Encryption by everyone in the account"
            Effect: "Allow"
            Principal: 
              AWS: "*"
            Action: 
              - "kms:Encrypt"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Ref "AWS::AccountId"
  PipelineKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-key"
      TargetKeyId: !Ref PipelineKey
